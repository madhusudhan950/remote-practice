#include<iostream>
using std::string;
using std::cout;

// By default, everything in a class is private in C++.
// There are 3 access modifiers: Public, Private, and Protected.
// private: Members of a class are not accessible outside the class.
// public: Members of a class are accessible from outside the class.

class Employee { // Class declaration
    // Members
public:
    string name;
    string company; // This class does not represent data; it's just a blueprint for data.
    int age;

    // Behavior of an Employee - a method for introduction
    void IntroduceYourself() {
        cout << "Name: " << name << '\n';
        cout << "Company: " << company << '\n';
        cout << "Age: " << age << '\n';
    }
//constructor creation  Method-1: using this->
//private:    //private/public
/*Employee(std::string name,std::string company,int age){ //constructor(parameter1,parameter2,parameter3,...) parameters are based on reqired members of an object of a class.
// assigning properties of a members(parameters) method-1:
this->name=name;
this->company=company;
this->age=age;*/
//Without this-> name=name; does nothig because the local parameter name is just assigned to itself
//With using this-> refers to the calss variable,and name refers to the constructor parameter 
Employee(std::string Name,std::string Company,int Age){ //using same as parameters 
name=Name;
company=Company;
age=Age;
}

};

int main() {
    //assigning members to object without constructor   method-1
    // Instance of class 
    //Employee employee1;
    // Accessing the attributes of Employee class
    /*employee1.name = "Joe";     // object1.member
    employee1.company = "Oracle"; 
    employee1.age = 23; */
    //assigning members to object with constructor  method-2
    //invoking constructor
    Employee employee1=Employee("joe","oracle",23); // employee1 is an object of the Employee class
    employee1.IntroduceYourself();

    /*Employee employee2;
    employee2.name = "Jhon";     // object2.member
    employee2.company = "Amazon"; 
    employee2.age = 33; 
    employee2.IntroduceYourself();*/   // method 1 without using constructor
    Employee employee2=Employee("jhon","amazon",28); // employee1 is an object of the Employee class
    employee2.IntroduceYourself();

    //when we create a multiple objects this is drawback of the creation objects.
    // so it overcomes the problem is constructors
    //constructor: a constructor is special type of method that is invoked each time that an object of a class is created.
    //default constructor : default constructor is a term to describe a constructor that is dramatically generated by a compiler.
    //constructor rules:
    //1.constructor doesn't have any return type
    //2.constructor has the same name as the class(Employee Employee)class name-constructor name
    //3.constructor is must be public constructor is doesn't necessarily need to be pulic certain situations such as specific situations that you want to make your constructor is private
    return 0;
}
